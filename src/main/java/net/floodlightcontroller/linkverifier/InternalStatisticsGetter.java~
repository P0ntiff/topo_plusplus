package net.floodlightcontroller.linkverifier;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.*;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.nio.ByteBuffer;
import net.floodlightcontroller.core.IFloodlightProviderService;
import net.floodlightcontroller.routing.Link;
import org.openflow.protocol.OFPacketIn;
import org.openflow.protocol.OFStatisticsRequest;
import org.openflow.protocol.statistics.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;

import net.floodlightcontroller.core.FloodlightContext;
import net.floodlightcontroller.core.IOFSwitch;
import net.floodlightcontroller.packet.*;

public class InternalStatisticsGetter extends Thread {

    private LLDP lldp;
    private OFPacketIn msg;
    private FloodlightContext cntx;
    protected IFloodlightProviderService provider;

    private IOFSwitch sw1;
    private short sw1Port;
    private IOFSwitch sw2;
    private short sw2Port;

    protected static Logger log;

    public InternalStatisticsGetter(LLDP lldp, IOFSwitch sw1, OFPacketIn msg, FloodlightContext cntx, IFloodlightProviderService floodlightProvider) {
        this.lldp = lldp;
        this.msg = msg;
        this.cntx = cntx;
        this.provider = floodlightProvider;

       	this.sw1 = sw1;
        this.sw1Port = msg.getInPort();
	// TO DO get chassis id from .getChassisID without buffer under/overflows
        for (LLDPTLV lldptlv : lldp.getOptionalTLVList()) {
            if (lldptlv.getType() == 127 && lldptlv.getLength() == 12
                && lldptlv.getValue()[0] == 0x0
                && lldptlv.getValue()[1] == 0x26
                && lldptlv.getValue()[2] == (byte) 0xe1
                && lldptlv.getValue()[3] == 0x0) {
                ByteBuffer dpidBB = ByteBuffer.wrap(lldptlv.getValue());
                this.sw2 = floodlightProvider.getSwitch(dpidBB.getLong(4));
           }
	}

	ByteBuffer portBB = ByteBuffer.wrap(lldp.getPortId().getValue());
	portBB.position(1);
	this.sw2Port = portBB.getShort();
        log = LoggerFactory.getLogger(InternalStatisticsGetter.class);
    }

    public void run() {

	log.warn("\n\n-- STATS for (switch,port) pairs ({}, {}) and ({}, {}) --\n",
			new Object[] {sw1.getStringId(),
				sw1Port,
				sw2.getStringId(),
				sw2Port,
				});

        OFPortStatisticsReply sw1Stats = (OFPortStatisticsReply)getPortStatistics(sw1, sw1Port).get(0);
	OFPortStatisticsReply sw2Stats = (OFPortStatisticsReply)getPortStatistics(sw2, sw2Port).get(0);

	log.warn("\n({}, {}): received {}B, transmitted {}B.\n",
			new Object[] {sw1.getStringId(),
				sw1Stats.getPortNumber(),
				sw1Stats.getReceiveBytes(),
				sw1Stats.getTransmitBytes(),
			});
	log.warn("\n({}, {}): received {}B, transmitted {}B.\n",
			new Object[] {sw2.getStringId(),
				sw2Stats.getPortNumber(),
				sw2Stats.getReceiveBytes(),
				sw2Stats.getTransmitBytes(),
			});

        return;
    }

    //***********************************
    //  TOPOGUARD++ METHODS - Statistics and Flow Conservation
    //***********************************



    public List<OFStatistics> getPortStatistics(IOFSwitch sw, short port) {

        Future<List<OFStatistics>> future;
        List<OFStatistics> values = null;
        OFStatisticsRequest req = new OFStatisticsRequest();
        req.setStatisticType(OFStatisticsType.PORT);
        int requestLength = req.getLengthU();
        if (sw == null) return null;

        // Construct Port Req
        OFPortStatisticsRequest portReq = new OFPortStatisticsRequest();
        portReq.setPortNumber(port);
        req.setStatistics(Collections.singletonList((OFStatistics)portReq));
        requestLength += portReq.getLength();
        req.setLengthU(requestLength);
        try {
            future = sw.queryStatistics(req);
            values = future.get(10, TimeUnit.SECONDS);
        } catch (Exception e) {
            log.error("Failure retrieving statistics from switch " + sw, e);
        }
        return values;
    }

}
